;;; visual-replace-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from visual-replace.el

(defvar visual-replace-global-mode nil "\
Non-nil if Visual-Replace-Global mode is enabled.
See the `visual-replace-global-mode' command
for a description of this minor mode.")
(custom-autoload 'visual-replace-global-mode "visual-replace" nil)
(autoload 'visual-replace-global-mode "visual-replace" "\
Global mode for remapping `query-replace' to `visual-replace'.

This is a global minor mode.  If called interactively, toggle the
`Visual-Replace-Global mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='visual-replace-global-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'visual-replace-regexp "visual-replace" "\
Run `visual-replace', starting in regular expression mode." t)
(autoload 'visual-replace-from-isearch "visual-replace" "\
Switch from isearch to `visual-replace'.

This function attempts to copy as much of the current state of
isearch as possible, with the text being searched set as query
for `visual-replace'. Replacement starts at the current point." t)
(autoload 'visual-replace-thing-at-point "visual-replace" "\
Start visual replace for the thing at point.

THING defaults to symbol. It can be set to anything that
 `thing-at-point` understands.

(fn &optional THING)" t)
(autoload 'visual-replace-selected "visual-replace" "\
Start visual replace for replacing text in region or the current word.

Falls back to `visual-replace-thing-at-point' if the region is
not active." t)
(register-definition-prefixes "visual-replace" '("visual-replace"))

;;; End of scraped data

(provide 'visual-replace-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; visual-replace-autoloads.el ends here
