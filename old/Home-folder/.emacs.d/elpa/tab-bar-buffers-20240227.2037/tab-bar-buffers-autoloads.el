;;; tab-bar-buffers-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from tab-bar-buffers.el

(let ((loads (get 'tab-bar-buffers 'custom-loads))) (if (member '"tab-bar-buffers" loads) nil (put 'tab-bar-buffers 'custom-loads (cons '"tab-bar-buffers" loads)) (put 'tab-bar 'custom-loads (cons 'tab-bar-buffers (get 'tab-bar 'custom-loads)))))
(defvar tab-bar-buffers-mode nil "\
Non-nil if Tab-Bar-Buffers mode is enabled.
See the `tab-bar-buffers-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `tab-bar-buffers-mode'.")
(custom-autoload 'tab-bar-buffers-mode "tab-bar-buffers" nil)
(autoload 'tab-bar-buffers-mode "tab-bar-buffers" "\
Show buffers instead of tabs in tab-bar.

This is a global minor mode.  If called interactively, toggle the
`Tab-Bar-Buffers mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='tab-bar-buffers-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" '(tab-bar-mode))
(register-definition-prefixes "tab-bar-buffers" '("tab-bar-buffers"))

;;; End of scraped data

(provide 'tab-bar-buffers-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; tab-bar-buffers-autoloads.el ends here
