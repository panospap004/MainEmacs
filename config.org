#+Title: Emacs Kickstarter
#+Author: MiniApollo
#+Description: A starting point for Gnu Emacs with good defaults and packages that most people may want to use.
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+Startup: showeverything
#+Options: toc:2

* Table Of Contents :toc:
- [[#introduction][Introduction]]
- [[#important-to-load-first][Important to load first]]
  - [[#startup-performance][Startup Performance]]
  - [[#auto-tangle-configuration-file][Auto-tangle Configuration file]]
  - [[#good-defaults][Good Defaults]]
- [[#appearance][Appearance]]
  - [[#set-theme][Set Theme]]
  - [[#transparency][Transparency]]
  - [[#fonts][Fonts]]
  - [[#modeline][Modeline]]
- [[#development][Development]]
  - [[#projectile][Projectile]]
  - [[#eglot][Eglot]]
  - [[#yasnippet][Yasnippet]]
  - [[#language-modes][Language modes]]
  - [[#terminal][Terminal]]
- [[#multi-file-example][Multi File Example]]
  - [[#adding-the-lisp-directory-to-load-path][Adding the lisp directory to load-path]]
  - [[#sourcing-the-files][Sourcing the files]]
  - [[#load-the-packages-from-packagesel][load the packages from packages.el]]
  - [[#using-the-file][Using the file]]
  - [[#auto-save-if-auto-tangle-header-is-on][Auto save if auto tangle header is on]]
- [[#other-packages][Other Packages]]
  - [[#nerd-icons][Nerd Icons]]
  - [[#git][Git]]
  - [[#corfu][Corfu]]
  - [[#cape][Cape]]
  - [[#orderless][Orderless]]
  - [[#vertico-and-marginalia][Vertico and Marginalia]]
  - [[#consult][Consult]]
  - [[#diminish][Diminish]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#which-key][Which-Key]]
- [[#runtime-performance][Runtime Performance]]

* Introduction
#+begin_src emacs-lisp
  ;; Kickstart.emacs is *not* a distribution.
  ;; It's a template for your own configuration.
  ;;
  ;; It is *recommeded* to configure it from the *config.org* file.
  ;; The goal is that you read every line, top-to-bottom, understand
  ;; what your configuration is doing, and modify it to suit your needs.
  ;;
  ;; You can delete this when you're done. It's your config now. :)
#+end_src

* Important to load first
** Startup Performance
Make startup faster by reducing the frequency of garbage collection. This will be set back when startup finishes.
#+begin_src emacs-lisp
  ;; The default is 800 kilobytes. Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Auto-tangle Configuration file
Auto-Tangle Org configuration file for better startup times.
If you want to use this don't forget to add this to the top of the org document (#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes)

*Remember*, if this code can't be loaded (errors before this code), the init.el file won't update on change!
To fix this, you need to find this file (C-x C-f), fix the error and press C-c C-v t to tangle it manually.

This snippet adds a hook to org-mode buffers so that start/org-babel-tangle-config gets executed each time such a buffer gets saved.
This function checks to see if the file being saved is the Emacs.org file you’re looking at right now, and if so,
automatically exports the configuration here to the associated output files.
#+begin_src emacs-lisp
  (defun start/org-babel-tangle-config ()
    "Automatically tangle our Emacs.org config file when we save it. Credit to Emacs From Scratch for this one!"
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'start/org-babel-tangle-config)))
#+end_src

** Good Defaults
#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (menu-bar-mode nil)         ;; Disable the menu bar
    (scroll-bar-mode nil)       ;; Disable the scroll bar
    (tool-bar-mode nil)         ;; Disable the tool bar
    ;;(inhibit-startup-screen t)  ;; Disable welcome screen

    (delete-selection-mode t)   ;; Select text and delete it by typing.
    (electric-indent-mode nil)  ;; Turn off the weird indenting that Emacs does by default.
    (electric-pair-mode t)      ;; Turns on automatic parens pairing

    (blink-cursor-mode nil)     ;; Don't blink cursor
    (global-auto-revert-mode t) ;; Automatically reload file if it has changed

    ;;(dired-kill-when-opening-new-dired-buffer t) ;; Dired don't create new buffer
    ;;(recentf-mode t) ;; Enable recent file mode

    ;;(global-visual-line-mode t)           ;; Enable truncated lines
    (display-line-numbers-type 'relative) ;; Relative line numbers
    (global-display-line-numbers-mode t)  ;; Display line numbers

    (mouse-wheel-progressive-speed nil) ;; Disable progressive speed when scrolling
    (scroll-conservatively 10) ;; Smooth scrolling
    ;;(scroll-margin 8)

    (tab-width 4)

    (make-backup-files nil) ;; Stop creating ~ backup files
    (auto-save-default nil) ;; Stop creating # auto save files
    :hook
    (prog-mode . (lambda () (hs-minor-mode t))) ;; Enable folding (hide/show) in programming modes
    :config
    ;; Move customization variables to a separate file to keep init.el clean.
    (setq custom-file (locate-user-emacs-file "custom-vars.el"))
    (load custom-file 'noerror 'nomessage)
    :bind
    ([escape] . keyboard-escape-quit)) ;; Makes Escape quit prompts (Minibuffer Escape)
#+end_src

* Appearance
** Set Theme
Set gruvbox theme, if you want some themes try out doom-themes.
Use consult-theme to easily try out themes (*Epilepsy* Warning).
#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :config
    (load-theme 'gruvbox-dark-medium t)) ;; We need to add t to trust this package
#+end_src

** Transparency
With Emacs version 29, true transparency has been added.
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(alpha-background . 100)) ;; For all new frames henceforth
#+end_src

** Fonts
*** Setting fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      ;; :font "JetBrains Mono" ;; Set your favorite type of font or download JetBrains Mono
                      :height 120
                      :weight 'medium)
  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.

  ;;(add-to-list 'default-frame-alist '(font . "JetBrains Mono")) ;; Set your favorite font
  ;; Set the default font for the initial frame
  (add-to-list 'initial-frame-alist '(font . "MonaspiceRn Nerd Font-16.5"))

  ;; Set the default font for new frames
  (add-to-list 'default-frame-alist '(font . "MonaspiceRn Nerd Font-16.5"))

  (setq-default line-spacing 0.12)
#+end_src

*** Zooming In/Out
You can use the bindings C-+ C-- for zooming in/out. You can also use CTRL plus the mouse wheel for zooming in/out.
#+begin_src emacs-lisp
  (use-package emacs
    :bind
    ("C-+" . text-scale-increase)
    ("C--" . text-scale-decrease)
    ("<C-wheel-up>" . text-scale-increase)
    ("<C-wheel-down>" . text-scale-decrease))
#+end_src

** Modeline
Replace the default modeline with a prettier more useful one.
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-height 25)     ;; Sets modeline height
    (doom-modeline-bar-width 5)   ;; Sets right bar width
    (doom-modeline-persp-name t)  ;; Adds perspective name to modeline
    (doom-modeline-persp-icon t)) ;; Adds folder icon next to persp name
#+end_src

* Development
** Projectile
Project interaction library for Emacs.
#+begin_src emacs-lisp
  (use-package projectile
    :init
    (projectile-mode)
    :custom
    (projectile-run-use-comint-mode t) ;; Interactive run dialog when running projects inside Emacs (like giving input)
    (projectile-switch-project-action #'projectile-dired) ;; Open dired when switching to a project
    (projectile-project-search-path '("~/projects/" "~/work/" ("~/github" . 1)))) ;; . 1 means only search the first subdirectory level for projects
  ;; Use Bookmarks for smaller, not standard projects
#+end_src

** Eglot
Language Server Protocol Support for Emacs. The built-in is now Eglot.
#+begin_src emacs-lisp
  (use-package eglot
    :ensure nil ;; Don't install eglot because it's now built-in
    :hook ((c-mode c++-mode lua-mode) . eglot-ensure)
    :custom
    (eglot-events-buffer-size 0) ;; No event buffers (Lsp server logs)
    (eglot-autoshutdown t)         ;; Shutdown unused servers.
    (eglot-report-progress nil))   ;; Disable LSP server logs
#+end_src

** Yasnippet
A template system for Emacs. And yasnippet-snippets is a snippet collection package.
To use it, write out the full keyword (or use autocompletion) and press Tab.
#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :hook (prog-mode . yas-minor-mode))
#+end_src

** Language modes
*** (Additional language-specific configurations can remain here.)

** Terminal
*** Eat
Eat (Emulate A Terminal) is a terminal emulator within Emacs.
It is more portable and less resource‑intensive than vterm or eshell.
We set up Eat with eshell. For bash, zsh etc., check its repository for details.
#+begin_src emacs-lisp
  (use-package eat
    :hook ('eshell-load-hook #'eat-eshell-mode))
#+end_src

* Multi File Example
** Adding the lisp directory to load-path
Adds the lisp directory to Emacs's load path so that it can find additional elisp files.
#+begin_src emacs-lisp
  (setq user-emacs-directory "~/.config/MainEmacs/")
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

** Sourcing the files
To use the elisp files we need to load them.
Notes:
- Ensure the file and its provide name match.
- Use a group naming convention (e.g. init-, start-) to avoid conflicts.
#+begin_src emacs-lisp
    (require 'example)
    (require 'package_configs)
    (require 'configs)
    (require 'keymaps)
    (require 'packages)
    ;; Removed (require 'packages) in favor of loading packages.el below.
#+end_src

** load the packages from packages.el  
#+begin_src emacs-lisp
    ;; Load the package installation setup from packages.el
    ;; (load "~/.configs/emacs/lisp/packages")
#+end_src

** Using the file
And now we can use everything from that file.
#+begin_src emacs-lisp
  ;; (start/hello)
#+end_src

** Auto save if auto tangle header is on
If the file contains a header like "#+TANGLE: lisp/filename.el" it will auto-tangle.
#+begin_src emacs-lisp
  (defun my/org-auto-tangle ()
    "Automatically tangle the org file if it contains a tangle header."
    (when (and (buffer-file-name)
               (string-suffix-p ".org" (buffer-file-name)))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  
  (add-hook 'after-save-hook #'my/org-auto-tangle)
#+end_src

* Other Packages
;; The configuration blocks for Nerd Icons, Git, Diff-hl, Corfu, Cape, Orderless,
;; Vertico and Marginalia, Consult, Diminish, Rainbow Delimiters, and Which-Key remain.
** Nerd Icons
For icons and enhanced UI.
Remember to install fonts via nerd-icons-install-fonts.
#+begin_src emacs-lisp
  (use-package nerd-icons
    :if (display-graphic-p))

  (use-package nerd-icons-dired
    :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))

  (use-package nerd-icons-ibuffer
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

** Git
*** Magit
Complete text-based interface to Git.
#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status)
#+end_src

*** Diff-hl
Highlights uncommitted changes in the gutter.
#+begin_src emacs-lisp
  (use-package diff-hl
    :hook ((dired-mode         . diff-hl-dired-mode-unless-remote)
           (magit-pre-refresh  . diff-hl-magit-pre-refresh)
           (magit-post-refresh . diff-hl-magit-post-refresh))
    :init (global-diff-hl-mode))
#+end_src

** Corfu
Provides a polished completion popup.
#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-prefix 2)
    (corfu-popupinfo-mode t)
    (corfu-popupinfo-delay 0.5)
    (corfu-separator ?\s)
    (completion-ignore-case t)
    (tab-always-indent 'complete)
    (corfu-preview-current nil)
    :init
    (global-corfu-mode))
  
  (use-package nerd-icons-corfu
    :after corfu
    :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

** Cape
Provides Completion At Point Extensions.
#+begin_src emacs-lisp
  (use-package cape
    :after corfu
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-dict)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-keyword))
#+end_src

** Orderless
A completion style that matches components in any order.
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Vertico and Marginalia
Minimal vertical completion UI and metadata annotations.
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode))

  (savehist-mode)

  (use-package marginalia
    :after vertico
    :init
    (marginalia-mode))

  (use-package nerd-icons-completion
    :after marginalia
    :config
    (nerd-icons-completion-mode)
    :hook
    ('marginalia-mode-hook . 'nerd-icons-completion-marginalia-setup))
#+end_src

** Consult
Provides powerful search and navigation commands.
#+begin_src emacs-lisp
  (use-package consult
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)
    (advice-add #'register-preview :override #'consult-register-window)
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    (autoload 'projectile-project-root "projectile")
    (setq consult-project-function (lambda (_) (projectile-project-root))))
#+end_src

** Diminish
Hide or abbreviate minor mode lighters in the modeline.
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

** Rainbow Delimiters
Adds colors to matching brackets.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Which-Key
Helps discover key bindings.
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode 1)
    :diminish
    :custom
    (which-key-side-window-location 'bottom)
    (which-key-sort-order #'which-key-key-order-alpha)
    (which-key-sort-uppercase-first nil)
    (which-key-add-column-padding 1)
    (which-key-min-display-lines 6)
    (which-key-idle-delay 0.8)
    (which-key-max-description-length 25)
    (which-key-allow-imprecise-window-fit nil))
#+end_src

* Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
We also increase read-process-output-max so Emacs can read more data.
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
  (setq read-process-output-max (* 1024 1024)) ;; 1MB
#+end_src
