* Headers
you use * to make headers the more you type the more yo go in 
you can also press tab to fold 1 header all shift tab to fold all headers and each shift tab after that it will unflold all by 1 level
* Markdown  
like syntax
you can do *bold using ** /italic using // _underline using __ +cut using ++ and highlight using either = or ~ =highlight=  ~highlight~ like in markdown
+ spot with 1 +  
- [ ] fruits :: get apples
- [-] meat :: get apples
- [X] veggies :: get carrots 

- [ ] not started
- [-] in progress
- [X] complete
  
[[https:emacsdocs.org][A better emacs docs]]
[[~/Pictures/0.jpg][cute image]]
[[https://orgmode.org][a nice website]]
[[file:~/Pictures/dank-meme.png]]
[[earlier heading][an earlier heading in the document]]
[[./package_configs.org][packages-configs]]

*for more link inserts see the spc-o-l keybind*

also you can make internal links using *<< >>* like this <<earlier heading>> to link to the text then you use *[[text] ]* with the same text to make the link like this 
example <<link>>

[[link]]
*** earlier heading
[[https://upload.wikimedia.org/wikipedia/commons/5/5d/Konigsberg_bridges.png]]

| I    | am  | a    | table |
| with | two | rows | !     |
|      |     |      |       |

| Tool         | Literate programming? | Reproducible Research? | Languages |
|--------------+-----------------------+------------------------+-----------|
| Javadoc      | partial               | no                     | Java      |
| Haskell .lhs | partial               | no                     | Haskell   |
| noweb        | yes                   | no                     | any       |
| Sweave       | partial               | yes                    | R         |
| Org-mode     | yes                   | yes                    | any       |


# for comments
* Bulleted list
- item 1
- item 2
  - subitem 1
  - subitem 2
    - subsubitem 1
    - subsubitem 2

+ item 1
+ item 2
  + subitem 1
  + subitem 2
    + subsubitem 1
    + subsubitem 2

1. item 1
2. item 2
   1. subitem 1
   2. subitem 2
      1. subsubitem 1
      2. subsubitem 2

1) item 1
2) item 2
   1) subitem 1
   2) subitem 2
      1) subsubitem 1
      2) subsubitem 2

+ item 1
  * item 2
    - subitem 1
      1. subsubitem 1
      2. subsubitem 2
    - subitem 2

*(you can use + - 1. 1) and * for subitems)* and you can change styles by doing shift+left_arrow/right_arrow on the item-list you want to change

* Footnotes (link to bottom of page)
Here is a sentence with a footnote.[fn:1] [fn:1 ] this is how you make a footnote without the space after the 1
(you can go back and fourth bettween the footnote using ctrl+c ctrl+c)
* TODO todo and done headers
to add todos you can use the keybind spc-o-t then t for todo or any other key recomended by the pop up menu
you can list all the todos in a project with Spc-o-L

* Code block
#+begin_src cpp
    #include <iostream>

    int main(void){
      std::cout << std::endl;
    }
#+end_src

* Different blocks
you can add a lost of blocks with the keybind spc-o-ctrl+i for example 

#+begin_quote
a quote block
#+end_quote

#+begin_example
an example block
#+end_example

#+begin_Custom block
a custom block
#+end_Custom

etc

* DONE the done header 
you can pres shift+right_arrow/left_arrow to go through your todo etc list 

* TAGS                                                            :personal:
you can add tags to your headers with the keybind spc-o-T then select the tag you want or add a new one tags are usually combined with todos and agenda to seperate them even more 

** for more detailed and real todos use the keybind spc-o-n and chose from the options

** every smaller header inharets the tags of the parent header in combination with its own tags :project:
you can see that in the agenda view it wont show for this file since its not in the agenda files list

* Completion [1/3] [33%]
by doin [/] or [%] or both and then running C-c C-c you can see the progress of the headers children headers todo states
** TODO [/] [%] finish org-mode example file

** DONE [/] [%] finish emacs config file
CLOSED: [2025-09-11 Thu 16:30]
:LOGBOOK:
- State "DONE"       from "DOING"      [2025-09-11 Thu 16:30]
:END:
you can press tab in the logbook to fold/unfold it

** TODO [/] [%] finish hyprland config file 

* Priority
you can also have priority cobined with the tags in emacs to make it more clear what is imprortant
and so on you do them with the [#A ] keybinds or C-c , or with my keymap SPC-o C-p

** [#A] highest priority                                               :work:
** [#B] medium priority                                              :school:
** [#C] low priority                                               :personal:

* Agenda
you can access the agenda from spc-o-a and then which view you want best on the spc-o-n todos you made 

* Scedual
you can scedual headers with the keybind C-c C-s and then select the date you want to scedual it for
you can change the dates by 
+ 1 saying the full date like 2025-09-11 (year-month-day) you can also set time like 2025-09-11 15:00 {if you want it for this year you can just do 09-11 15:00} {if you want it for this month you can just do 11 15:00}
+ 2 saying +n (n is the number of days from today) or -n (n is the number of days before today)
+ 3 Shift+right_arrow/left_arrow to go through days from the view above 

** example scedual 
SCHEDULED: <2025-09-11 Thu>

you can make sceduals repeating by doing C-c C-s and then selecting the date and then pressing + and then selecting the repeat rate like every week or every month etc 
for example +1w is every week +2w is every 2 weeks +1m is every month +1y is every year etc

** example repeating scedual
SCHEDULED: <2025-09-12 Fri +1w>

you can also add deadlines with C-c C-d and the same rules as sceduals apply

** example deadline 
DEADLINE: <2025-09-12 Fri>

you can also combine sceduals and deadlines to make a header sceduald and with a deadline

** example scedual and deadline 
SCHEDULED: <2025-09-13 Sat>
DEADLINE: <2025-09-15 Mon> 

* mermaid diagrams
you can create diagrams with mermaid syntax to make the src block the keybind is <cd and to run it to create the image file you do ctrl+c ctrl+c on the src block

#+begin_src mermaid :file test.png
graph TD
A[Hard] -->|Text| B(Round)
B --> C{Decision}
C -->|One| D[Result 1]
C -->|Two| E[Result 2]
#+end_src

#+RESULTS:
[[file:test.png]]

#+begin_src mermaid
sequenceDiagram
Alice->>John: Hello John, how are you?
loop Healthcheck
    John->>John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John-->>Alice: Great!
John->>Bob: How about you?
Bob-->>John: Jolly good!
#+end_src

#+begin_src mermaid
gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
#+end_src

#+begin_src mermaid
    classDiagram
    Class01 <|-- AveryLongClass : Cool
    <<interface>> Class01
    Class09 --> C2 : Where am i?
    Class09 --* C3
    Class09 --|> Class07
    Class07 : equals()
    Class07 : Object[] elementData
    Class01 : size()
    Class01 : int chimp
    Class01 : int gorilla
    class Class10 {
      <<service>>
      int id
      size()
    }
#+end_src

#+begin_src mermaid
    stateDiagram
    [*] --> Still
    Still --> [*]
    Still --> Moving
    Moving --> Still
    Moving --> Crash
    Crash --> [*]
#+end_src

* krita images 

or you can make custom krita images with the spc-o-Ctrl+d keybind then click on the image to open it in krita and draw  

[[krita:/home/pappanos/.config/MainEmacs/Files-org/test.kra][test]]

* LaTeX equations
you can make single line latex with $ equation $ or multi line with $$ equation $$ and to run it you press the keybind SPC-o-ctrl+l (you will need to have installed sudo pacman -S texlive for this to work)

$$
P\left(A=2 \,\middle|\, \frac{A^2}{B}>4\right)
$$

* Org-tranclusion 
to start org-tranclusion see the keybinds under the SPC-o-Ctrl+t prefix {i have witch key so wait for the pop up menu}
you can include other files or section of files with org-tranclusion like this 
**** this adds the whole file
#+ transclude:[ [./Files-org/TEST.org]] {without the space after the + and [} 
#+transclude: [[./Files-org/NOTES.org]]

**** this adds a specific section of the file this time the WORK section
#+ transclude:[ [./Files-org/NOTES.org::* WORK]] {without the space after the + and [}
#+transclude: [[./Files-org/NOTES.org::* WORK]]

**** this adds only the content under the header 
#+ transclude:[ [./Files-org/NOTES.org::* WORK]] :only-contents {without the space after the + and [}
#+transclude: [[./Files-org/NOTES.org::* WORK]] :only-contents

**** this adds a code block from a file with specific lines
the :src c part makes it so that it will format the code as c code in a c src block
the :line works like this 1 == the line with the word you specified like in the below header - = til what point and the secont number shows how many lines if a number is not specified it will go to the end of the file
#+ transclude:[ [./Files-org/main.c]] :lines 1-5 :src c
#+transclude: [[./Files-org/main.c]] :lines 1-5 :src c

**** this adds a specific function and everything under it
#+transclude: [[file:./Files-org/main.c::main][main function]] :lines 1- :src c :end "addF"

if you have 2 lines that are similar you will need to add the whole line to make it clear for example 
int add(int a, int b);
int add(int a, int b) {
i have to add lines in my code so i cant just type add since it will select the first one it finds so i need to give it the line till a character that is diffrent
#+transclude: [[file:./Files-org/main.c::int add(int a, int b) {][main function]]  :src c

alternative you could create a commend and specify that comment to transclude

#+transclude: [[file:./Files-org/main.c::addF][main function]]  :src c

and if you dont want the comment to show you can use the :line 
#+transclude: [[file:./Files-org/main.c::addF][main function]] :lines 2- :src c

**** add a specific funtion with an end point 
you can use the :end and make a custom commend in a file to specify where to stop transcluding so you can add a specific function only without specific lines in case it grows or shrinks
#+transclude: [[file:Files-org/main.c::main]] :lines 1- :src c :end "mainE"

* Footnotes
[fn:1] this is the footnote

