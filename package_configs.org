#+TITLE: Package Configurations
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/MainEmacs/package_configs.el :mkdirp yes

* Theme and Modeline
** Gruvbox Theme
#+begin_src emacs-lisp
      (use-package gruvbox-theme)
      ;;   :config
      ;;   (load-theme 'gruvbox-dark-medium t)
      (use-package catppuccin-theme 
       :config
       (load-theme 'catppuccin t)
       (setq catppuccin-flavor 'macchiato) ;; or 'latte, 'macchiato, or 'mocha, or 'frappe
       (catppuccin-reload))
      (use-package doom-themes
        ;; :ensure t
        ;; :config
        ;; Global settings (defaults)
        ;; (load-theme 'doom-moonlight t)
      )
#+end_src

** Doom Modeline
#+begin_src emacs-lisp
    ;; (use-package doom-modeline
    ;;   :init (doom-modeline-mode 1)
    ;;   :custom
    ;;   (doom-modeline-height 25)
    ;;   (doom-modeline-bar-width 5)
    ;;   (doom-modeline-persp-name t)
    ;;   (doom-modeline-persp-icon t))
(use-package doom-modeline
  :ensure t
  :init
  ;; Basic settings
  (setq doom-modeline-height 25
        doom-modeline-bar-width 6
        doom-modeline-github nil  ;; Disable GitHub integration
        doom-modeline-mu4e nil
        doom-modeline-gnus nil
        doom-modeline-irc nil
        doom-modeline-time t  ;; Enable time display [[3]][[7]]
        doom-modeline-display-default-persp-name nil)

  ;; Git integration
  (setq doom-modeline-git t  ;; Show Git branch [[3]][[7]]
        doom-modeline-buffer-file-name-style 'relative)

  ;; Diagnostics (Flycheck)
  (setq doom-modeline-checker t)  ;; Show error/warning counts [[3]][[7]]

  ;; Copilot status segment
  (setq doom-modeline-additional-segments
        '(("copilot" (:eval (if (bound-and-true-p copilot-mode)
                                (propertize "  " 'face '(:foreground "#81B29A"))
                              (propertize "  " 'face '(:foreground "#81B29A")))))))

  :config
  (doom-modeline-mode 1)

  ;; Fix display issues [[4]][[8]]
  (setq-default mode-line-format
                (append mode-line-format
                        '((:eval (doom-modeline-format--main)))))

  ;; Font configuration (adjust based on your setup) [[5]][[9]]
  (when (display-graphic-p)
    (set-face-attribute 'doom-modeline-buffer-path nil :font "JetBrains Mono 10")
    (set-face-attribute 'doom-modeline-buffer-file nil :font "JetBrains Mono 10"))

  ;; Git diff counts (might need additional setup)
  (setq doom-modeline-git-show-details t)
  (setq doom-modeline-git-show-count t))
#+end_src

* Development Tools
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :init (projectile-mode)
    :custom
    (projectile-run-use-comint-mode t)
    (projectile-switch-project-action #'projectile-dired)
    (projectile-project-search-path '("~/projects/" "~/work/" ("~/github" . 1))))
#+end_src

** Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :ensure nil
    :hook ((c-mode c++-mode lua-mode) . eglot-ensure)
    :custom
    (eglot-events-buffer-size 0)
    (eglot-autoshutdown t)
    (eglot-report-progress nil))
#+end_src

** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :hook (prog-mode . yas-minor-mode))
#+end_src

** Eat Terminal
#+begin_src emacs-lisp
  (use-package eat
    :hook ('eshell-load-hook #'eat-eshell-mode))
#+end_src

** vterm
#+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :commands vterm
  :config
  (setq vterm-shell "/usr/bin/fish")  ;; Use Fish shell
  (setq vterm-max-scrollback 10000))  ;; Increase scrollback buffer
#+end_src

** ansiterm
#+begin_src emacs-lisp
(use-package term
  :ensure nil
  :commands ansi-term
  :config
  (setq explicit-shell-file-name "/usr/bin/fish"))  ;; Use Fish shell
#+end_src

** popper for a popup window
#+begin_src emacs-lisp
;; Use Popper for transient terminals
(use-package popper
  :ensure t
  :bind (("C-=" . popper-toggle-latest)
         ("M-]" . popper-cycle))
  :init
  (setq popper-reference-buffers
        '("\\*vterm\\*" "\\*ansi-term\\*" "\\*eat\\*" "\\*term\\*"))
  (defun my-popper-window-height (win)
    "Set the popup window WIN to one-third of the screen height."
    (fit-window-to-buffer
      win
      (floor (frame-height) 3)
      (floor (frame-height) 3)))

  (setq popper-window-height #'my-popper-window-height)

  (popper-mode 1))
#+end_src

** Evil-comentry
#+begin_src emacs-lisp
    (use-package evil-commentary
      :ensure t
      :after evil
      :config
      (evil-commentary-mode 1))  ; Enable commentary functionality globally
#+end_src

** Colorful-mode
add suport for hex and every other option 
#+begin_src emacs-lisp
    (use-package colorful-mode
      :ensure t
      :hook (prog-mode . colorful-mode)
      :custom
      ;; Allow using mouse to change colors
      (colorful-allow-mouse-clicks t)
      ;; Highlight the actual color instead of using a prefix indicator
      (colorful-use-prefix nil)
      ;; Use short hex format when possible (#RGB instead of #RRGGBB when applicable)
      (colorful-short-hex-conversions t)
      ;; Highlight colors everywhere, not just in strings
      (colorful-only-strings nil)
      :config
      ;; Configure color highlighting for different major modes
      (setq colorful-extra-color-keyword-functions
            '(colorful-add-hex-colors
              ((css-mode html-mode web-mode js-mode js2-mode) . 
               (colorful-add-css-variables-colors
                colorful-add-rgb-colors
                colorful-add-hsl-colors
                colorful-add-oklab-oklch-colors
                colorful-add-color-names))
              (emacs-lisp-mode . (colorful-add-color-names 
                                  colorful-add-rgb-colors
                                  colorful-add-hex-colors))
              (latex-mode . colorful-add-latex-colors)))
    	(set-face-attribute 'colorful-base nil :box nil)
    )
#+end_src

# ** Rainbow-mode
# #+begin_src emacs-lisp
#     (use-package rainbow-mode)
# #+end_src

* Modern Dired Configuration (Integrated Solution)
** Core Navigation & Buffer Management
#+begin_src emacs-lisp
        (use-package dired
        	:ensure nil
          :commands (dired dired-jump)
          :bind (("C-x C-j" . dired-jump))
          :custom
          (dired-listing-switches "-agholv --group-directories-first --time-style=long-iso")
          (dired-auto-revert-buffer t)
          (dired-dwim-target t)
          (dired-kill-when-opening-new-dired-buffer t)
          (delete-by-moving-to-trash t)
          :config
          ;; Enable modern buffer reuse behavior
          (put 'dired-find-alternate-file 'disabled nil)
          
          ;; Enhanced navigation functions
          (defun my/dired-up-directory ()
            "Smart parent directory navigation with buffer reuse"
            (interactive)
            (if (file-symlink-p dired-directory)
                (dired (file-name-directory (file-chase-links dired-directory)))
              (dired-up-directory))
            (dired-kill-subdir))

          (defun my/dired-open-item ()
            "Smart open with buffer reuse and file handling"
            (interactive)
            (let ((file (dired-get-file-for-visit)))
              (if (file-directory-p file)
                  (dired-find-alternate-file)
                (dired-find-file))))
    )
#+end_src

** Visual Enhancements
#+begin_src emacs-lisp
    (use-package diredfl
      :hook (dired-mode . diredfl-mode))

    (use-package dired-hide-dotfiles
      :hook (dired-mode . dired-hide-dotfiles-mode)
      :config
    )
#+end_src

** Advanced Functionality
#+begin_src emacs-lisp
    (use-package dired-subtree
      :after dired
      :config
      (evil-collection-define-key 'normal 'dired-mode-map
        "TAB" 'dired-subtree-cycle))

    (use-package dired-narrow
      :after dired
      :config
      (evil-collection-define-key 'normal 'dired-mode-map
        "/" 'dired-narrow))

    (use-package dired-rsync
      :after dired
      :config
    )

    (use-package fd-dired
      :config (setq fd-dired-use-fdwalk-executable t))
#+end_src

* UI Enhancements
** Nerd Icons
#+begin_src emacs-lisp
  (use-package nerd-icons
    :if (display-graphic-p))

  (use-package nerd-icons-dired
    :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))

  (use-package nerd-icons-ibuffer
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

** Magit and Diff
#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status)

  (use-package diff-hl
    :hook ((dired-mode         . diff-hl-dired-mode-unless-remote)
           (magit-pre-refresh  . diff-hl-magit-pre-refresh)
           (magit-post-refresh . diff-hl-magit-post-refresh))
    :init (global-diff-hl-mode))
#+end_src

* Completion Framework
** Corfu
#+begin_src emacs-lisp
  (use-package corfu ;; package that takes the place of ivy / helm
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-prefix 1)
    (corfu-popupinfo-mode t)
    (corfu-popupinfo-delay 0.5)
    (corfu-separator ?\s)
    (completion-ignore-case t)
    (tab-always-indent 'complete)
    (corfu-preview-current nil)
    :init (global-corfu-mode))

  (use-package nerd-icons-corfu
    :after corfu
    :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

** Cape
#+begin_src emacs-lisp
  (use-package cape
    :after corfu
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-dict)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-keyword))
#+end_src

** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

* [#C] Search and Navigation
** Vertico and Marginalia
#+begin_src emacs-lisp
  (use-package vertico
    :init (vertico-mode))

  (use-package marginalia
    :after vertico
    :init (marginalia-mode))

  (use-package nerd-icons-completion
    :after marginalia
    :config (nerd-icons-completion-mode)
    :hook ('marginalia-mode-hook . 'nerd-icons-completion-marginalia-setup))
#+end_src

** Consult
#+begin_src emacs-lisp
  (use-package consult
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)
    (advice-add #'register-preview :override #'consult-register-window)
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    (autoload 'projectile-project-root "projectile")
    (setq consult-project-function (lambda (_) (projectile-project-root))))
#+end_src

* Quality of Life
** Diminish
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Which-Key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode 1)
    :diminish
    :custom
    (which-key-side-window-location 'bottom)
    (which-key-sort-order #'which-key-key-order-alpha)
    (which-key-sort-uppercase-first nil)
    (which-key-add-column-padding 1)
    (which-key-min-display-lines 6)
    (which-key-idle-delay 0.8)
    (which-key-max-description-length 25)
    (which-key-allow-imprecise-window-fit nil))
#+end_src

* Org Mode
** Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :hook (org-mode . toc-org-mode))
#+end_src

** Org Superstar
#+begin_src emacs-lisp
    (use-package org-superstar
      :after org
      :hook (org-mode . org-superstar-mode)
      :custom
      (org-hide-leading-stars t)
      (org-superstar-remove-leading-stars t)
      (org-superstar-headline-bullets-list '("●" "○" "■" "●" "○" "■"))) ;; replace the * with this symbols
      (setq org-hide-emphasis-markers t);; hide the * + _ ~ etc when you use them
      ;; Disable org-indent-mode by default (stops outline-style indentation)
      (setq org-startup-indented nil)
      ;; Disable electric indentation in Org mode
      (add-hook 'org-mode-hook
          (lambda ()
            (electric-indent-local-mode -1)))
      ;; Prevent Org from adapting indentation to outline structure
      (setq org-adapt-indentation nil)
      (setq org-agenda-files '(
        "~/.config/MainEmacs/Files-org/TODO.org"
      ))
      (defun my/org-mode-header-font-setup () ;; the next 15 lines starting in this one make the headers larger
        "Configure fonts and sizes for Org mode headers."
    (dolist (face-height '((org-level-1 . 1.2)
                         (org-level-2 . 1.1)
                         (org-level-3 . 1.05)
                         (org-level-4 . 1.0)
                         (org-level-5 . 1.1)
                         (org-level-6 . 1.1)
                         (org-level-7 . 1.1)
                         (org-level-8 . 1.1)))
                (set-face-attribute (car face-height) nil
                        :font "MonaspiceRn Nerd Font"
                        :weight 'bold
                        :height (cdr face-height))))

      (add-hook 'org-mode-hook #'my/org-mode-header-font-setup)
#+end_src

** Center org mode text 
#+begin_src emacs-lisp
(use-package olivetti
  :ensure t
  :hook (org-mode . olivetti-mode)
  :custom
  (olivetti-body-width 120))  ; Adjust 80 to your preferred text width
#+end_src

** Source Code Blocks
#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :custom
    (org-edit-src-content-indentation 4)
    :hook (org-mode . org-indent-mode))
#+end_src

** Make Code Blocks For Languages With Keybinds

to use this code you first type a < in a org file then the 2 keys you selected for example ce and then press TAB (if it dosent work be sure corfu is not trying to auto complete a word and if it press space and backspace and then TAB) if you want to add more check out this site for the names or packages they need 
[[https://orgmode.org/worg/org-contrib/babel/languages/index.html][Babel languages]]

#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; No need for (require 'org-tempo) in Org 9.2+
  (add-to-list 'org-structure-template-alist '("ct" . "src shell"))
  (add-to-list 'org-structure-template-alist '("ce" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("cp" . "src cpp")))
#+end_src

** Add Language Support For Code Blocks
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (C . t) ;; C adds support for c cpp and d if you have its compiler
    )
  )
  (push '("conf-unix" . conf-unix) org-src-lang-modes) ;; this is to highlighte .conf unix files
)
#+end_src

** Add Lsp For Even More Language Support

[[https://emacs-lsp.github.io/lsp-mode/][Lsp-Mode-Site]] everything you need to know is pretty much in this website
 
*** Basic Integration

#+begin_src emacs-lisp
    (use-package lsp-mode
      :commands (lsp lsp-deferred) 
      :init
      ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
      (setq lsp-keymap-prefix "C-SPC l")
      :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode
             (c++-mode . lsp)
             ;; if you want which-key integration
             (lsp-mode . lsp-enable-which-key-integration))
      :config 
      (lsp-enable-which-key-integration t)
    )
#+end_src

*** Lsp Ui Improvments

#+begin_src emacs-lisp
    (use-package lsp-ui
    	:commands lsp-ui-mode
      :hook (lsp-mode . lsp-ui-mode)
    )

    (use-package lsp-treemacs 
      :commands lsp-treemacs-errors-list
    	:init
        (setq treemacs-position 'right)
      ;; :config 
    )
    ;; icons for treemacs
    (use-package treemacs-nerd-icons
      :after treemacs
      :config
        (treemacs-load-theme "nerd-icons"))

    ;; optionally if you want to use debugger
    (use-package dap-mode)
    ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

    ;; optional if you want which-key integration
    (use-package which-key
        :config
        (which-key-mode))
#+end_src

** Dashboard
#+begin_src emacs-lisp
    (use-package dashboard
      :ensure t
      :config
      ;; Center dashboard content
      (setq dashboard-center-content t
            dashboard-vertically-center-content t)

      ;; Function to load a random ASCII banner from your ASCII.txt file
      (defun my/dashboard-set-random-banner ()
        "Set a random ASCII banner for dashboard from ASCII.txt."
        (let* ((ascii-file (expand-file-name "~/.config/MainEmacs/ASCII.txt"))
               (content (with-temp-buffer
                          (insert-file-contents ascii-file)
                          (buffer-string)))
               (banners (split-string content "\n---\n" t)))
          (when banners
            (let* ((banner (nth (random (length banners)) banners))
                   (tmp-banner-file (make-temp-file "dashboard-banner-" nil ".txt")))
              (with-temp-file tmp-banner-file
                (insert banner))
              (setq dashboard-startup-banner tmp-banner-file)))))

      ;; Set banner font and prevent stretching
      (set-face-attribute 'dashboard-text-banner nil 
                          :family "Monospace") ; Maintain character proportions [[9]]

      ;; Add margin adjustment and recentering after banner insertion
      (defun my/adjust-banner-layout ()
        "Fix centering and margins after banner insertion."
        (setq-local left-margin-width 8)   ; Adjust based on your art's width [[5]]
        (setq-local right-margin-width 8)
        (recenter-top-bottom))             ; Force vertical recentering [[1]][[10]]

      ;; Hook layout adjustment after banner insertion
      (advice-add 'dashboard-insert-banner :after #'my/adjust-banner-layout)

      ;; Advise dashboard-insert-banner to run our randomization each time
      (advice-add 'dashboard-insert-banner :before #'my/dashboard-set-random-banner)

      ;; Set the banner title (separate from banner text)
      (setq dashboard-banner-logo-title "")

      ;; Define dashboard items
      (setq dashboard-items '((recents   . 5)
                              (bookmarks . 5)
                              (projects  . 5)
                              (agenda    . 5)))

      ;; Set up the dashboard
      (dashboard-setup-startup-hook))

    ;; Ensure that when Emacs starts (or when using emacsclient without a file),
    ;; the dashboard is shown.
    (setq initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))

    ;; Function to refresh the dashboard buffer in new frames.
    (defun my/refresh-dashboard-on-new-frame (frame)
      "Refresh the dashboard buffer in FRAME if it's already open."
      (with-selected-frame frame
        (when (get-buffer dashboard-buffer-name)
          (with-current-buffer dashboard-buffer-name
            (dashboard-refresh-buffer)))))

    ;; Hook to refresh the dashboard when a new frame is created.
    (add-hook 'after-make-frame-functions #'my/refresh-dashboard-on-new-frame)

    ;; Function to open the dashboard in new frames if the current buffer is *scratch*.
    (defun my/open-dashboard-if-default-buffer (frame)
      "In FRAME, if the current buffer is *scratch* and no file is open, open the dashboard."
      (with-selected-frame frame
        (when (and (string= (buffer-name) "*scratch*")
                   (not buffer-file-name))
          (dashboard-open))))

    ;; Hook to open the dashboard in new frames when appropriate.
    (add-hook 'after-make-frame-functions #'my/open-dashboard-if-default-buffer)
#+end_src

* Finalization
#+begin_src emacs-lisp
  (provide 'package_configs)
#+end_src
